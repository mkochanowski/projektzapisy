# Generated by Django 2.1.8 on 2019-05-13 01:51 and extended.
import copy

from django.core import exceptions
from django.db import migrations, models
import django.db.models.deletion
from django.template.defaultfilters import slugify
from html2text import html2text as markdownify


def copy_tags(apps, schema_editor):
    """Copies all the tags from CourseEntity to corresponding CourseInformation.
    """
    CourseInformation = apps.get_model('courses', 'CourseInformation')
    all_courses = CourseInformation.objects.all()
    for c in all_courses:
        if not c.entity:
            continue
        c.tags.set(c.entity.tags.all())
        c.effects.set(c.entity.effects.all())


def get_semester_name(semester):
    """ returns name of semester 

    The function is copied from Semester model."""
    # TODO: wymuszanie formatu roku "XXXX/YY" zamiast "XXXX"
    if len(semester.year) != 7:
        return '(BŁĄD) {0} {1}'.format(semester.year, semester.get_type_display())
    return '{0} {1}'.format(semester.year, semester.get_type_display())


def migrate_courses(apps, schema_editor):
    """Copies all Course instances to CourseInstance."""
    Course = apps.get_model('courses', 'Course')
    CourseInstance = apps.get_model('courses', 'CourseInstance')

    all_courses = Course.objects.all().select_related(
        'entity', 'semester', 'information'
    ).prefetch_related('entity__courseinformation', 'entity__courseinformation__proposal')

    for c in all_courses:
        # Find proposal through entity.
        try:
            proposal = c.entity.courseinformation
        except exceptions.ObjectDoesNotExist:
            # Someone has deleted old proposals (vandalism). Create a shallow
            # replacement by hand for these courses.
            ci = CourseInstance(name=c.entity.name,
                                slug=c.slug,
                                description=markdownify(c.information.description or
                                                        c.entity.information.description),
                                course_type=c.entity.type,
                                owner=c.entity.owner,
                                semester=c.semester,
                                old_course=c)
            ci.save()
            continue
        # Extract data from the proposal.
        kwargs = copy.copy(proposal.__dict__)
        # Remove fields that should not be saved in the course.
        kwargs.pop('id', None)
        kwargs.pop('_state', None)
        kwargs.pop('_prefetched_objects_cache', None)
        kwargs.pop('created', None)
        kwargs.pop('modified', None)
        kwargs.pop('entity_id', None)
        kwargs.pop('slug', None)
        kwargs.update({
            'semester': c.semester,
            'offer': proposal.proposal,
            'records_start': c.records_start,
            'records_end': c.records_end,
            'old_course': c,
            'slug': c.slug,
        })
        if c.information and c.information.description:
            kwargs.update({
                'description': markdownify(c.information.description),
            })
        ci = CourseInstance(**kwargs)
        # Try to use the original slug. It might sometimes be duplicate with a
        # proposal. Then wy try to tweak it.
        try:
            with django.db.transaction.atomic():
                ci.save()
        except django.db.IntegrityError:
            ci.slug = slugify(f"{ci.name} {get_semester_name(ci.semester)}")
            ci.save()

        # Copy tags and effects.
        ci.tags.set(proposal.tags.all())
        ci.effects.set(proposal.effects.all())


def delete_all_courseinstances(apps, schema_editor):
    """Deletes all CourseInstance objects."""
    CourseInstance = apps.get_model('courses', 'CourseInstance')
    for ci in CourseInstance.objects.all():
        ci.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('proposal', '0007_proposal_semester'),
        ('courses', '0021_auto_20190517_1637'),
    ]

    operations = [
        migrations.RunPython(copy_tags, reverse_code=migrations.RunPython.noop),
        migrations.CreateModel(
            name='CourseInstance',
            fields=[
                ('courseinformation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='courses.CourseInformation')),
                ('records_start', models.DateTimeField(blank=True, null=True, verbose_name='Początek zapisów')),
                ('records_end', models.DateTimeField(blank=True, null=True, verbose_name='Koniec zapisów')),
                ('offer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='proposal.Proposal', verbose_name='oferta')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.Semester', verbose_name='semestr')),
                ('old_course', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='instance', to='courses.Course')),
            ],
            options={
                'verbose_name': 'Instancja przedmiotu',
                'verbose_name_plural': 'Instancje przedmiotów',
            },
            bases=('courses.courseinformation',),
        ),
        migrations.RunPython(migrate_courses, reverse_code=delete_all_courseinstances),
    ]
