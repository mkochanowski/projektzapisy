# Generated by Django 2.0.8 on 2019-04-08 17:20
from typing import Optional

import apps.offer.proposal.models
from django.core import exceptions
from django.db import migrations, models
import django.db.models.deletion
from html2text import html2text as markdownify

# These methods are copied from CourseEntity models. We could not import the
# model, because it may be gone in the codebase when people are running this
# migration.
def _add_or_none(hours1, hours2):
    """
    Adds two numbers denoting the number
    of hours of a particular type of class.
    If both are None, returns None, otherwise it
    returns the sum, possibly casting None to 0
    """
    if hours1 is None and hours2 is None:
        return 0

    return (hours1 or 0) + (hours2 or 0)

def get_lectures(e: 'CourseEntity'):
    if not e.information:
        return e.lectures or 0
    return _add_or_none(e.lectures, e.information.lectures)

def get_exercises(e: 'CourseEntity'):
    if not e.information:
        return e.exercises or 0
    return _add_or_none(e.exercises, e.information.exercises)

def get_laboratories(e: 'CourseEntity'):
    if not e.information:
        return e.laboratories or 0
    return _add_or_none(e.laboratories, e.information.laboratories)

def get_repetitions(e: 'CourseEntity'):
    if not e.information:
        return e.repetitions or 0
    return _add_or_none(e.repetitions, e.information.repetitions)

def get_seminars(e: 'CourseEntity'):
    if not e.information:
        return e.seminars or 0
    return _add_or_none(e.seminars, e.information.seminars)

def get_exercises_laboratiories(e: 'CourseEntity'):
    if not e.information:
        return e.exercises_laboratiories or 0
    return _add_or_none(e.exercises_laboratiories, e.information.exercises_laboratories)


def migrate_entities_to_proposals(apps, schema_editor):
    def gtz(x: Optional[int], s: str) -> Optional[str]:
        """gtz is short for greater_than_zero. It will return s if x is greater
        then zero, and None otherwise.
        """
        if x is None or x <= 0:
            return None
        return s

    CourseEntity = apps.get_model('courses', 'CourseEntity')
    Proposal = apps.get_model('proposal', 'Proposal')
    Employee = apps.get_model('users', 'Employee')

    try:
        nn = Employee.objects.get(user__username='nieznany')
    except exceptions.ObjectDoesNotExist:
        # For tests, where 'nieznany' is absent from the database.
        nn = None

    for e in CourseEntity.objects.all().select_related('information').prefetch_related(
            'tags', 'syllabus', 'syllabus__learning_methods', 'syllabus__studentwork_set'):
        p = Proposal(
            name=e.name,
            name_en=e.name_en or '',
            short_name=e.shortName or '',
            slug=e.slug,
            description=markdownify(e.information.description if e.information else None or ''),
            language='en' if e.english else 'pl',
            course_type=e.type,
            owner=e.owner or nn, # Sets 'Nieznany Prowadzący' as owner if none is set.
            recommended_for_first_year=e.suggested_for_first_year,

            semester=e.semester,
            has_exam=e.exam,

            hours_lecture=get_lectures(e),
            hours_exercise=get_exercises(e),
            hours_lab=get_laboratories(e),
            hours_exercise_lab=get_exercises_laboratiories(e),
            hours_seminar=get_seminars(e),
            hours_recap=get_repetitions(e),

            status=e.status,
            entity=e,
        )
        p.save()

        p.tags.set(e.tags.all())
        p.effects.set(e.effects.all())

        if hasattr(e, 'syllabus'):
            s = e.syllabus
            p.teaching_methods = '\n'.join([f"* {l.name}" for l in s.learning_methods.all()])
            p.preconditions = markdownify(s.requirements)
            p.objectives = markdownify(s.objectives)
            p.contents = markdownify(s.contents)
            p.teaching_effects = markdownify(s.effects_txt)
            p.literature = markdownify(s.literature)
            p.verification_methods = ", ".join(
                filter(lambda x: x, [
                    gtz(s.exam_hours, "egzamin"),
                    gtz(s.tests_hours, "sprawdziany/kolokwia"),
                    gtz(s.project_presentation_hours, "prezentacja projektu")
                ]))
            p.passing_means = markdownify(s.passing_form)
            p.student_labour = '\n'.join([f"* {w.name} {w.hours}" for w in s.studentwork_set.all()])
        
        p.save()


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0017_courseinformation'),
        ('proposal', '0004_auto_20180525_0559'),
    ]

    operations = [
        migrations.CreateModel(
            name='Proposal',
            fields=[
                ('courseinformation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='courses.CourseInformation')),
                ('status', models.PositiveSmallIntegerField(choices=[(apps.offer.proposal.models.ProposalStatus(0), 'propozycja'), (apps.offer.proposal.models.ProposalStatus(1), 'w ofercie'), (apps.offer.proposal.models.ProposalStatus(2), 'poddana pod głosowanie'), (apps.offer.proposal.models.ProposalStatus(4), 'wycofana z oferty'), (apps.offer.proposal.models.ProposalStatus(5), 'do poprawienia'), (apps.offer.proposal.models.ProposalStatus(6), 'szkic')], default=apps.offer.proposal.models.ProposalStatus(6), verbose_name='status propozycji')),
            ],
            bases=('courses.courseinformation',),
            options={'verbose_name': 'propozycja przedmiotu', 'verbose_name_plural': 'propozycje przedmiotu'},
        ),
        migrations.RunPython(migrate_entities_to_proposals, reverse_code=migrations.RunPython.noop),
        migrations.RunSQL("""
            UPDATE courses_courseinformation
            SET
                created=e.created,
                modified=e.edited
            FROM
                courses_courseentity e
            WHERE
                entity_id=e.id
        """, reverse_sql=migrations.RunSQL.noop)
    ]
