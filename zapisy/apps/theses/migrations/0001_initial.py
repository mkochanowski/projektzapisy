# Generated by Django 2.1.8 on 2019-05-09 22:10

import apps.theses.enums
import apps.theses.models
import apps.theses.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0015_merge_20190321_1311'),
    ]

    operations = [
        migrations.CreateModel(
            name='ThesesSystemSettings',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('num_required_votes', models.SmallIntegerField(validators=[
                 apps.theses.validators.validate_num_required_votes], verbose_name='Liczba głosów wymaganych do zaakceptowania')),
                ('master_rejecter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='users.Employee', validators=[
                 apps.theses.validators.validate_master_rejecter], verbose_name='Członek komisji odpowiedzialny za zwracanie prac do poprawek')),
            ],
            options={
                'verbose_name': 'ustawienia systemu prac dyplomowych',
                'verbose_name_plural': 'ustawienia systemu prac dyplomowych',
            },
        ),
        migrations.CreateModel(
            name='Thesis',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300, unique=True)),
                ('kind', models.SmallIntegerField(choices=[(apps.theses.enums.ThesisKind(0), 'mgr'), (apps.theses.enums.ThesisKind(1), 'inż'), (apps.theses.enums.ThesisKind(
                    2), 'lic'), (apps.theses.enums.ThesisKind(3), 'isim'), (apps.theses.enums.ThesisKind(4), 'lic+inż'), (apps.theses.enums.ThesisKind(5), 'lic+inż+isim')])),
                ('status', models.SmallIntegerField(choices=[(apps.theses.enums.ThesisStatus(1), 'weryfikowana przez komisję'), (apps.theses.enums.ThesisStatus(2), 'zwrócona do poprawek'), (
                    apps.theses.enums.ThesisStatus(3), 'zaakceptowana'), (apps.theses.enums.ThesisStatus(4), 'w realizacji'), (apps.theses.enums.ThesisStatus(5), 'obroniona')])),
                ('reserved_until', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now_add=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('advisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                              related_name='thesis_advisor', to='users.Employee')),
                ('students', models.ManyToManyField(
                    blank=True, to='users.Student')),
                ('supporting_advisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                         related_name='thesis_supporting_advisor', to='users.Employee')),
            ],
            options={
                'verbose_name': 'praca dyplomowa',
                'verbose_name_plural': 'prace dyplomowe',
            },
        ),
        migrations.CreateModel(
            name='ThesisVoteBinding',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.SmallIntegerField(choices=[(apps.theses.enums.ThesisVote(1), 'brak głosu'), (
                    apps.theses.enums.ThesisVote(2), 'odrzucona'), (apps.theses.enums.ThesisVote(3), 'zaakceptowana')])),
                ('reason', models.CharField(blank=True, max_length=500)),
                ('thesis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                             related_name='votes', to='theses.Thesis')),
                ('voter', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='users.Employee')),
            ],
        ),
    ]
