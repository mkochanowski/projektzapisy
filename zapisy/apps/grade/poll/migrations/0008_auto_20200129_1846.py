# Generated by Django 2.1.15 on 2020-01-29 18:46
import copy
from typing import Dict, Iterable

import apps.grade.poll.models
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


POLL_ARCHIVE = {}


def archive_polls_from_old_schema(apps, schema_editor):
    """Saves all the polls to a global variable."""
    Poll = apps.get_model('poll', 'Poll')

    OpenQuestionOrdering = apps.get_model('poll', 'OpenQuestionOrdering')
    SingleChoiceQuestionOrdering = apps.get_model('poll', 'SingleChoiceQuestionOrdering')
    MultipleChoiceQuestionOrdering = apps.get_model('poll', 'MultipleChoiceQuestionOrdering')

    def dump_open_question(oq: OpenQuestionOrdering) -> Dict:
        q = oq.question
        return {
            'id': q.id,
            'question': q.content,
            'type': 'textarea',
            'position': (oq.sec_title, oq.position)
        }

    def dump_multi_choice_question(oq: MultipleChoiceQuestionOrdering) -> Dict:
        q = oq.question
        return {
            'id': q.id,
            'question': q.content,
            'type': 'checkbox',
            'choices': [o.content for o in q.options.all()],
            'position': (oq.sec_title, oq.position)
        }

    def dump_single_choice_question(oq: SingleChoiceQuestionOrdering) -> Dict:
        q = oq.question
        return {
            'id': q.id,
            'question': q.content,
            'type': 'radio',
            'choices': [o.content for o in q.options.all()],
            'position': (oq.sec_title, oq.position)
        }

    def collect_questions_in_poll(poll) -> Iterable['BaseQuestion']:
        open_questions = OpenQuestionOrdering.objects.filter(sections__poll=poll).select_related(
            'question').annotate(sec_title=models.F('sections__title'))
        single_choice = SingleChoiceQuestionOrdering.objects.filter(
            sections__poll=poll).select_related('question').prefetch_related(
                'question__options').annotate(sec_title=models.F('sections__title'))
        multi_choice = MultipleChoiceQuestionOrdering.objects.filter(
            sections__poll=poll).select_related('question').prefetch_related(
                'question__options').annotate(sec_title=models.F('sections__title'))

        oqs = ([dump_single_choice_question(q) for q in single_choice] +
               [dump_multi_choice_question(q) for q in multi_choice] +
               [dump_open_question(q) for q in open_questions])
        oqs.sort(key=lambda q: q['position'])
        return oqs

    for poll in Poll.objects.all().select_related('group'):
        exam = poll.title == "Egzamin"
        ogol = poll.title == "Ogół zajęć w Instytucie"
        if not ogol and poll.group is None:
            continue
        d = {
            'group': poll.group_id if not exam else None,
            'course': poll.group.course_id if exam else None,
            'semester': poll.semester_id if ogol else None,
            'questions': collect_questions_in_poll(poll),
        }
        POLL_ARCHIVE[poll.id] = d


def migrate_submissions(apps, schema_editor):
    """Migrates the submissions with one-by-one."""
    SavedTicket = apps.get_model('poll', 'SavedTicket')

    OpenQuestionAnswer = apps.get_model('poll', 'OpenQuestionAnswer')
    MultipleChoiceQuestionAnswer = apps.get_model('poll', 'MultipleChoiceQuestionAnswer')
    SingleChoiceQuestionAnswer = apps.get_model('poll', 'SingleChoiceQuestionAnswer')

    Submission = apps.get_model('poll', 'Submission')

    for st in SavedTicket.objects.all():
        try:
            questions = copy.deepcopy(POLL_ARCHIVE[st.poll_id]['questions'])
        except KeyError:
            continue
        for question in questions:
            if question['type'] == 'textarea':
                ans = OpenQuestionAnswer.objects.filter(saved_ticket=st,
                                                        question=question['id']).first()
                question.update({
                    'answer': ans.content if ans else "",
                })
            elif question['type'] == 'radio':
                ans = SingleChoiceQuestionAnswer.objects.filter(
                    saved_ticket=st, question=question['id']).select_related('option').first()
                question.update({
                    'answer': ans.option.content if ans else "",
                })
            elif question['type'] == 'checkbox':
                ans = MultipleChoiceQuestionAnswer.objects.filter(
                    saved_ticket=st, question=question['id']).prefetch_related('options').first()
                question.update({
                    'answer': [o.content for o in ans.options.all()] if ans else [],
                })
            del question['id']
            del question['position']
        Submission.objects.create(
            poll_id=st.poll_id,
            ticket=st.ticket + str(st.poll_id),
            submitted=st.finished,
            answers={
                "version": 1,
                "schema": questions
            },
        )


def restore_polls(apps, schema_editor):
    """Restores the polls from POLL_ARCHIVE.

    The poll objects are going to survive the migrations, but the details need
    to be restored.
    """
    Poll = apps.get_model('poll', 'Poll')
    for key, dump in POLL_ARCHIVE.items():
        poll = Poll.objects.get(id=key)
        poll.group_id = dump['group']
        poll.course_id = dump['course']
        poll.semester_id = dump['semester']
        poll.save()


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0029_remove_term_classroom'),
        ('poll', '0007_auto_20190529_1419'),
    ]

    operations = [
        migrations.RunPython(code=archive_polls_from_old_schema),
        # migrations.RunPython(code=archive_submissions_from_old_schema),
        migrations.CreateModel(
            name='Schema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questions', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('type', models.SmallIntegerField(choices=[(apps.grade.poll.models.PollType(1), 'ankieta dla wykładu'), (apps.grade.poll.models.PollType(2), 'ankieta dla ćwiczeń'), (apps.grade.poll.models.PollType(3), 'ankieta dla pracowni'), (apps.grade.poll.models.PollType(5), 'ankieta dla ćwiczenio-pracowni'), (apps.grade.poll.models.PollType(6), 'ankieta dla seminarium'), (apps.grade.poll.models.PollType(7), 'ankieta dla lektoratu'), (apps.grade.poll.models.PollType(8), 'ankieta dla zajęć wf'), (apps.grade.poll.models.PollType(9), 'ankieta dla repetytorium'), (apps.grade.poll.models.PollType(10), 'ankieta dla projektu'), (apps.grade.poll.models.PollType(1000), 'ankieta dla egzaminu'), (apps.grade.poll.models.PollType(1001), 'ankieta ogólna')], verbose_name='Kategoria')),
            ],
            options={
                'verbose_name': 'szablon',
                'verbose_name_plural': 'szablony',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answers', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('ticket', models.TextField(unique=True)),
                ('submitted', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'złoszenie',
                'verbose_name_plural': 'zgłoszenia',
            },
        ),
        migrations.AddField(
            model_name='submission',
            name='poll',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='poll.Poll'),
        ),
        migrations.AddField(
            model_name='submission',
            name='schema',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='poll.Schema'),
        ),
        migrations.RunPython(migrate_submissions),
        migrations.AlterUniqueTogether(
            name='lastvisit',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='lastvisit',
            name='poll',
        ),
        migrations.RemoveField(
            model_name='lastvisit',
            name='user',
        ),
        migrations.RemoveField(
            model_name='multiplechoicequestion',
            name='options',
        ),
        migrations.RemoveField(
            model_name='multiplechoicequestion',
            name='sections',
        ),
        migrations.RemoveField(
            model_name='multiplechoicequestionanswer',
            name='options',
        ),
        migrations.RemoveField(
            model_name='multiplechoicequestionanswer',
            name='question',
        ),
        migrations.RemoveField(
            model_name='multiplechoicequestionanswer',
            name='saved_ticket',
        ),
        migrations.RemoveField(
            model_name='multiplechoicequestionanswer',
            name='section',
        ),
        migrations.AlterUniqueTogether(
            name='multiplechoicequestionordering',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='multiplechoicequestionordering',
            name='question',
        ),
        migrations.RemoveField(
            model_name='multiplechoicequestionordering',
            name='sections',
        ),
        migrations.RemoveField(
            model_name='openquestion',
            name='sections',
        ),
        migrations.RemoveField(
            model_name='openquestionanswer',
            name='question',
        ),
        migrations.RemoveField(
            model_name='openquestionanswer',
            name='saved_ticket',
        ),
        migrations.RemoveField(
            model_name='openquestionanswer',
            name='section',
        ),
        migrations.AlterUniqueTogether(
            name='openquestionordering',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='openquestionordering',
            name='question',
        ),
        migrations.RemoveField(
            model_name='openquestionordering',
            name='sections',
        ),
        migrations.AlterUniqueTogether(
            name='savedticket',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='savedticket',
            name='poll',
        ),
        migrations.RemoveField(
            model_name='section',
            name='poll',
        ),
        migrations.AlterUniqueTogether(
            name='sectionordering',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='sectionordering',
            name='poll',
        ),
        migrations.RemoveField(
            model_name='sectionordering',
            name='section',
        ),
        migrations.RemoveField(
            model_name='singlechoicequestion',
            name='options',
        ),
        migrations.RemoveField(
            model_name='singlechoicequestion',
            name='sections',
        ),
        migrations.RemoveField(
            model_name='singlechoicequestionanswer',
            name='option',
        ),
        migrations.RemoveField(
            model_name='singlechoicequestionanswer',
            name='question',
        ),
        migrations.RemoveField(
            model_name='singlechoicequestionanswer',
            name='saved_ticket',
        ),
        migrations.RemoveField(
            model_name='singlechoicequestionanswer',
            name='section',
        ),
        migrations.AlterUniqueTogether(
            name='singlechoicequestionordering',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='singlechoicequestionordering',
            name='hide_on',
        ),
        migrations.RemoveField(
            model_name='singlechoicequestionordering',
            name='question',
        ),
        migrations.RemoveField(
            model_name='singlechoicequestionordering',
            name='sections',
        ),
        migrations.RemoveField(
            model_name='template',
            name='author',
        ),
        migrations.RemoveField(
            model_name='template',
            name='sections',
        ),
        migrations.RemoveField(
            model_name='template',
            name='studies_type',
        ),
        migrations.RemoveField(
            model_name='templatesections',
            name='section',
        ),
        migrations.RemoveField(
            model_name='templatesections',
            name='template',
        ),
        migrations.RemoveField(
            model_name='poll',
            name='author',
        ),
        migrations.RemoveField(
            model_name='poll',
            name='deleted',
        ),
        migrations.RemoveField(
            model_name='poll',
            name='description',
        ),
        migrations.RemoveField(
            model_name='poll',
            name='finished',
        ),
        migrations.RemoveField(
            model_name='poll',
            name='origin',
        ),
        migrations.RemoveField(
            model_name='poll',
            name='share_result',
        ),
        migrations.RemoveField(
            model_name='poll',
            name='studies_type',
        ),
        migrations.RemoveField(
            model_name='poll',
            name='title',
        ),
        migrations.AddField(
            model_name='poll',
            name='course',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.CourseInstance'),
        ),
        migrations.AlterField(
            model_name='poll',
            name='group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.Group'),
        ),
        migrations.AlterField(
            model_name='poll',
            name='semester',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.Semester'),
        ),
        migrations.DeleteModel(
            name='LastVisit',
        ),
        migrations.DeleteModel(
            name='MultipleChoiceQuestion',
        ),
        migrations.DeleteModel(
            name='MultipleChoiceQuestionAnswer',
        ),
        migrations.DeleteModel(
            name='MultipleChoiceQuestionOrdering',
        ),
        migrations.DeleteModel(
            name='OpenQuestion',
        ),
        migrations.DeleteModel(
            name='OpenQuestionAnswer',
        ),
        migrations.DeleteModel(
            name='OpenQuestionOrdering',
        ),
        migrations.DeleteModel(
            name='Option',
        ),
        migrations.DeleteModel(
            name='Origin',
        ),
        migrations.DeleteModel(
            name='SavedTicket',
        ),
        migrations.DeleteModel(
            name='Section',
        ),
        migrations.DeleteModel(
            name='SectionOrdering',
        ),
        migrations.DeleteModel(
            name='SingleChoiceQuestion',
        ),
        migrations.DeleteModel(
            name='SingleChoiceQuestionAnswer',
        ),
        migrations.DeleteModel(
            name='SingleChoiceQuestionOrdering',
        ),
        migrations.DeleteModel(
            name='Template',
        ),
        migrations.DeleteModel(
            name='TemplateSections',
        ),
        migrations.RunPython(code=restore_polls),
    ]
